package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import helpers.DbConnection;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.scene.control.TableView;
import javafx.scene.control.TableColumn;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javafx.fxml.FXMLLoader;

public class PanelController implements Initializable {
	
	@FXML
    private TableView<ModelTable> books_table;
	@FXML
	private TextField txtBookName;
	@FXML
	private TextField txtAuthorName;
	@FXML
	private TextField txtStock;
	@FXML
    private TableColumn<ModelTable,String> colId;

	@FXML
	private TableColumn<ModelTable,String> colBookName;
	@FXML
	private TableColumn<ModelTable,String> colAuthorName;
	@FXML
	private TableColumn<ModelTable,String> colStock;
	@FXML
	private Button btnAddBook;
	@FXML
    private Button btnGoToIssueBook;
	
	String query = null;
    Connection connection = DbConnection.getConnect(); ;
    PreparedStatement preparedStatement = null ;
    ResultSet resultSet = null ;
//    ModelTable books = null ;

	
	// Event Listener on Button[#btnAddBook].onAction
	@FXML
	public void addBook(ActionEvent event) {
		// TODO Autogenerated
//		Stage mainWindow = (Stage) tf.getScene().getWindow();
//		String title = tf.getText();
//		mainWindow.setTitle(title);
		
		String bookName = txtBookName.getText();
		String authorName = txtAuthorName.getText();
		String stock = txtStock.getText();
		
		if(addBook(bookName,authorName,stock)) {
			txtBookName.clear();
			txtAuthorName.clear();
			txtStock.clear();
		}else {
			System.out.println("error occered");
		}
		
		
	}
	 @FXML
    void goToIssueBook(ActionEvent event) throws IOException {
//		 Parent root = FXMLLoader.load(getClass().getResource("IssueBook.fxml"));
//		 Scene scene =  new Scene(root);
		Stage stag2e = (Stage) btnGoToIssueBook.getScene().getWindow();
		stag2e.close();
		 
		FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("IssueBook.fxml"));
		Parent root1 = (Parent) fxmlLoader.load();
		Stage stage = new Stage();
		stage.setScene(new Scene(root1));  
		stage.show();
		    

//		 this.makeAlert("Going", "Going", "Going to issue");

    }
	
	public void makeAlert(String headerText,String title,String content) {
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setTitle(title);
		alert.setHeaderText(headerText);
		alert.setContentText(content);
		alert.show();
	}
	
//	ObservableList<ModelTable> obList = FXCollections.observableArrayList();
	ObservableList<ModelTable>  bookList = FXCollections.observableArrayList();
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		
		refreshTable();
		
	}
	
	private void refreshTable() {
		bookList.clear();
		query = "SELECT * FROM `books` ORDER BY id desc";
        try {
			preparedStatement = connection.prepareStatement(query);
			resultSet = preparedStatement.executeQuery();
	        
	        while (resultSet.next()){
	        	bookList.add(new  ModelTable(
	                    resultSet.getString("id"),
	                    resultSet.getString("stock"),
	                    resultSet.getString("book_name"),
	                    resultSet.getString("author_name")
	                    ));
	        	System.out.println(bookList);
	        	books_table.setItems(bookList);
	            
	        }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        		
		colId.setCellValueFactory(new PropertyValueFactory<>("id"));
		colBookName.setCellValueFactory(new PropertyValueFactory<>("bookName"));
		colAuthorName.setCellValueFactory(new PropertyValueFactory<>("authorName"));
		colStock.setCellValueFactory(new PropertyValueFactory<>("stock"));
		
		books_table.setItems(bookList);
	}
	
	private boolean addBook(String bookName,String authorName, String stock) {
		if(bookName == "" || authorName == "" || stock == "") {
			this.makeAlert("Sorry Can't add", "Validation Error", "All fileds are required");
			return false;
		}
		
		query = "INSERT INTO `books`(`book_name`, `author_name`, `stock`) VALUES ('"+bookName+"','"+authorName+"','"+stock+"')";
        try {
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.executeUpdate();
			refreshTable();
			this.makeAlert(bookName, "Book Added successfully", bookName+" by:"+authorName+ " added successfully!");
			return true;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			this.makeAlert("Sorry Can't add", "Query Error", "Query Error");
			e.printStackTrace();
			return false;
			
		}
		
	}
}

	